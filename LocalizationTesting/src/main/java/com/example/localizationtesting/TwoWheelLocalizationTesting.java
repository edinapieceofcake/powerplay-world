package com.example.localizationtesting;

import com.acmerobotics.roadrunner.geometry.Pose2d;

import java.util.ArrayList;
import java.util.List;

public class TwoWheelLocalizationTesting {
    static List<Double> parallelEncoderPositions;
    static List<Double> perpendicularEncoderPositions;
    static List<Double> parallelEncoderVelocities;
    static List<Double> perpendicularEncoderVelocities;

    static List<Double> headingValues;
    static List<Double> headingVelocities;

    public static void main(String[] args) {

        buildLists();

        TwoWheelTrackingLocalizer localizer = new TwoWheelTrackingLocalizer(-0.5625, -4.6875, 0, 2.9175, -.125, 90,
                parallelEncoderPositions, perpendicularEncoderPositions, parallelEncoderVelocities,
                perpendicularEncoderVelocities, headingValues, headingVelocities);

        for (int i = 0; i < parallelEncoderPositions.size(); i++) {
            localizer.update();
            localizer.currentPosition++;
            Pose2d pose = localizer.getPoseEstimate();
            System.out.println(String.format("%f, %f, %f, = %f, %f, %f", parallelEncoderPositions.get(i), perpendicularEncoderPositions.get(i), Math.toDegrees(headingValues.get(i)), pose.getX(), pose.getY(), Math.toDegrees(pose.getHeading())));
        }
    }

    private static void buildLists() {
        parallelEncoderPositions = new ArrayList<>();
        perpendicularEncoderPositions = new ArrayList<>();
        headingValues = new ArrayList<>();
        parallelEncoderVelocities = new ArrayList<>();
        perpendicularEncoderVelocities = new ArrayList<>();

        headingVelocities = new ArrayList<>();

        parallelEncoderPositions.add( 0.000000);
        parallelEncoderPositions.add( 0.000000);
        parallelEncoderPositions.add( 0.000000);
        parallelEncoderPositions.add( 0.023795);
        parallelEncoderPositions.add( 0.160615);
        parallelEncoderPositions.add( 0.464000);
        parallelEncoderPositions.add( 1.064820);
        parallelEncoderPositions.add( 2.206974);
        parallelEncoderPositions.add( 3.774461);
        parallelEncoderPositions.add( 5.776205);
        parallelEncoderPositions.add( 7.789846);
        parallelEncoderPositions.add( 9.987897);
        parallelEncoderPositions.add(12.727282);
        parallelEncoderPositions.add(15.085948);
        parallelEncoderPositions.add(17.762871);
        parallelEncoderPositions.add(21.019794);
        parallelEncoderPositions.add(23.643179);
        parallelEncoderPositions.add(25.621127);
        parallelEncoderPositions.add(27.373025);
        parallelEncoderPositions.add(28.238563);
        parallelEncoderPositions.add(28.399179);
        parallelEncoderPositions.add(28.185025);
        parallelEncoderPositions.add(27.295691);
        parallelEncoderPositions.add(25.668717);
        parallelEncoderPositions.add(22.985845);
        parallelEncoderPositions.add(20.329743);
        parallelEncoderPositions.add(17.275076);
        parallelEncoderPositions.add(13.595794);
        parallelEncoderPositions.add(10.802871);
        parallelEncoderPositions.add( 8.072410);
        parallelEncoderPositions.add( 5.862461);
        parallelEncoderPositions.add( 4.077846);
        parallelEncoderPositions.add( 2.822667);
        parallelEncoderPositions.add( 1.954154);
        parallelEncoderPositions.add( 1.276000);
        parallelEncoderPositions.add( 0.657333);
        parallelEncoderPositions.add( 0.226051);
        parallelEncoderPositions.add(-0.095179);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);
        parallelEncoderPositions.add(-0.113026);

        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(-0.002958);
        perpendicularEncoderPositions.add(-0.005916);
        perpendicularEncoderPositions.add(-0.01479);
        perpendicularEncoderPositions.add(-0.011832);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.002958);
        perpendicularEncoderPositions.add(0.005916);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.020706);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.017748);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.020706);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.01479);
        perpendicularEncoderPositions.add(0.011832);
        perpendicularEncoderPositions.add(0.002958);
        perpendicularEncoderPositions.add(-0.002958);
        perpendicularEncoderPositions.add(-0.002958);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
        perpendicularEncoderPositions.add(0.0);
/*
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
        headingValues.add(0.0);
 */
        /*
        headingValues.add(0.047139);
        headingValues.add(0.047139);
        headingValues.add(0.047139);
        headingValues.add(0.047146);
        headingValues.add(0.046017);
        headingValues.add(0.04163);
        headingValues.add(0.034926);
        headingValues.add(0.035705);
        headingValues.add(0.032917);
        headingValues.add(0.03424);
        headingValues.add(0.034594);
        headingValues.add(0.035356);
        headingValues.add(0.035261);
        headingValues.add(0.037268);
        headingValues.add(0.033736);
        headingValues.add(0.038409);
        headingValues.add(0.038593);
        headingValues.add(0.036497);
        headingValues.add(0.032274);
        headingValues.add(0.032354);
        headingValues.add(0.034594);
        headingValues.add(0.040292);
        headingValues.add(0.03943);
        headingValues.add(0.040959);
        headingValues.add(0.042434);
        headingValues.add(0.040343);
        headingValues.add(0.039857);
        headingValues.add(0.043682);
        headingValues.add(0.049083);
        headingValues.add(0.048943);
        headingValues.add(0.048141);
        headingValues.add(0.047084);
        headingValues.add(0.046728);
        headingValues.add(0.046093);
        headingValues.add(0.049622);
        headingValues.add(0.049886);
        headingValues.add(0.049676);
        headingValues.add(0.047734);
        headingValues.add(0.046455);
        headingValues.add(0.046457);
        headingValues.add(0.046473);
        headingValues.add(0.046387);
        headingValues.add(0.046474);
        headingValues.add(0.046476);
        headingValues.add(0.04639);
        headingValues.add(0.04639);
*/

        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.04);
        headingValues.add(0.03);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.03);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.04);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.03);
        headingValues.add(0.02);
        headingValues.add(0.01);
        headingValues.add(-0.01);
        headingValues.add(0.00);
        headingValues.add(0.00);

        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add( 0.475897);
        parallelEncoderVelocities.add( 1.130256);
        parallelEncoderVelocities.add( 2.795897);
        parallelEncoderVelocities.add( 4.580513);
        parallelEncoderVelocities.add( 7.138461);
        parallelEncoderVelocities.add( 9.934359);
        parallelEncoderVelocities.add(11.837948);
        parallelEncoderVelocities.add(12.432820);
        parallelEncoderVelocities.add(13.979487);
        parallelEncoderVelocities.add(14.157948);
        parallelEncoderVelocities.add(15.228717);
        parallelEncoderVelocities.add(16.061538);
        parallelEncoderVelocities.add(15.823589);
        parallelEncoderVelocities.add(13.741538);
        parallelEncoderVelocities.add(11.302564);
        parallelEncoderVelocities.add( 7.673846);
        parallelEncoderVelocities.add( 3.212308);
        parallelEncoderVelocities.add(-0.178462);
        parallelEncoderVelocities.add(-2.736410);
        parallelEncoderVelocities.add(-7.971282);
        parallelEncoderVelocities.add(11.718974);
        parallelEncoderVelocities.add(15.704615);
        parallelEncoderVelocities.add(18.143589);
        parallelEncoderVelocities.add(19.214358);
        parallelEncoderVelocities.add(18.500512);
        parallelEncoderVelocities.add(18.024615);
        parallelEncoderVelocities.add(17.013333);
        parallelEncoderVelocities.add(13.860512);
        parallelEncoderVelocities.add(-9.577436);
        parallelEncoderVelocities.add(-6.424615);
        parallelEncoderVelocities.add(-5.115897);
        parallelEncoderVelocities.add(-4.521025);
        parallelEncoderVelocities.add(-2.855385);
        parallelEncoderVelocities.add(-2.974359);
        parallelEncoderVelocities.add(-0.773333);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);
        parallelEncoderVelocities.add(-0.000000);

        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.177481);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.118321);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(-0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.05916);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);
        perpendicularEncoderVelocities.add(0.0);

        headingVelocities.add(0.001091);
        headingVelocities.add(0.0);
        headingVelocities.add(0.002182);
        headingVelocities.add(-0.022907);
        headingVelocities.add(-0.020726);
        headingVelocities.add(-0.007636);
        headingVelocities.add(-0.010908);
        headingVelocities.add(-0.051269);
        headingVelocities.add(-0.043633);
        headingVelocities.add(-0.002182);
        headingVelocities.add(-0.002182);
        headingVelocities.add(0.021817);
        headingVelocities.add(-0.017453);
        headingVelocities.add(-0.017453);
        headingVelocities.add(0.004363);
        headingVelocities.add(-0.008727);
        headingVelocities.add(0.01309);
        headingVelocities.add(-0.032725);
        headingVelocities.add(-0.004363);
        headingVelocities.add(0.034907);
        headingVelocities.add(0.034907);
        headingVelocities.add(-0.001091);
        headingVelocities.add(0.025089);
        headingVelocities.add(0.079631);
        headingVelocities.add(-0.037088);
        headingVelocities.add(-0.066541);
        headingVelocities.add(0.03927);
        headingVelocities.add(0.111265);
        headingVelocities.add(-0.032725);
        headingVelocities.add(-0.098175);
        headingVelocities.add(-0.045815);
        headingVelocities.add(0.037088);
        headingVelocities.add(0.089448);
        headingVelocities.add(0.044724);
        headingVelocities.add(0.020726);
        headingVelocities.add(-0.034907);
        headingVelocities.add(-0.006545);
        headingVelocities.add(-0.009817);
        headingVelocities.add(0.0);
        headingVelocities.add(-0.001091);
        headingVelocities.add(0.004363);
        headingVelocities.add(0.002182);
        headingVelocities.add(0.0);
        headingVelocities.add(0.0);
        headingVelocities.add(0.001091);
        headingVelocities.add(0.0);
    }
}